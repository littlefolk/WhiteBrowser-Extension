<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="ja">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta http-equiv="Content-Script-Type" content="text/javascript">
  <meta http-equiv="Content-Style-Type" content="text/css">

  <title>SimpleTagCloud</title>

  <script type="text/javascript" src="./prototype.min.js"></script>
  <script type="text/javascript" src="../wblib.js"></script>

  <link type="text/css" rel="stylesheet" href="./SimpleTagCloud.css">
  <link type="text/css" rel="stylesheet" href="./skin/tagCloud_01.css" id="TagCloudSkin">
</head>
<body>

  <script type="text/javascript">
  <!--

    // 先頭から最大何個のファイルを調べるか。
    var SearchFileLimit = 2500;
    // ファイルのタグ更新時にタグクラウドを更新、する(true) or しない(false)。
    var ModifiedUpdate = false;


    var GetTagsData = function(){
      var TagsData = {};
      var getTagsMax = (wb.getFindInfo().result > SearchFileLimit)? SearchFileLimit: -1;
      wb.getInfos(0, getTagsMax).pluck('tags').flatten().each(function(tag){
        TagsData[tag] = ++TagsData[tag] || 1;
      });
      return TagsData;
    };

    var f_max = 1, f_min = 6, f_diff = (f_max - f_min);
    var MakeTagCloud = function(){
      var TagsHash = $H(GetTagsData());
      var TagsValues = TagsHash.values();
      var l_max = Math.log(TagsValues.max()), l_min = Math.log(TagsValues.min()), l_diff = (l_max - l_min);
      if (l_diff == 0) l_diff = 1;
      var calc = function(length){
        return (((Math.log(length) - l_min) / l_diff) * f_diff + f_min);
      };

      $E("TagCloud").innerHTML = TagsHash.map(function(pair){
          return "<li class='level" + Math.round(calc(pair.value)) + "'>" + 
                   "<a href='javascript:wb.find(\"" + wb.htmlDecode(pair.key) + "\")'>" + pair.key + " (" + pair.value + ")" + "</a>" + 
                 "</li>";
      }).join("");
    };


    var TagCloudSkinSetting = "TagCloudSkin.txt"

    var ReadTagCloudSkin = function(){
      try {
        var f = wb.readFile(TagCloudSkinSetting).join("");
        return (!(f) || !((1 <= f) && (f <= 13)))? 1: f;
      } catch (e) {
        ErrorMessage("ReadTagCloudSkin (" + e.name + ").");
      };
    };

    var SaveTagCloudSkin = function(i){
      try {
        wb.writeFile(TagCloudSkinSetting, parseInt(i, 10), 1);
      } catch (e) {
        ErrorMessage("SaveTagCloudSkin (" + e.name + ").");
      };
    };

    var LoadTagCloudSkin = function(){
      var i = ReadTagCloudSkin();
      ChangeTagCloudSkin(i);
      $E("TagCloudSkinSelector").selectedIndex = --i;
    };

    var ChangeTagCloudSkin = function(i){
      if (!i) i = $F("TagCloudSkinSelector");
      $E("TagCloudSkin").href = "./skin/tagCloud_" + (("00" + i)).slice(-2) + ".css";;
      SaveTagCloudSkin(i);
    };

    var ToggleTagCloudSkinSelector = function(){
      $("TagCloudSkinSelector").toggle();
    };


    var RoundrobinTagCloud = function(callbacks){
      var i = 0, l = callbacks.length;
      return function(){
        if (++i >= l) i = 0;
        var that = $("TagCloud");
        ((callbacks[i]).call(this, that.childElements())).each(function(elem){
          that.insert(elem);
        });
      };
    };

    var SortTagCloud = RoundrobinTagCloud([
       function(thats){
        return thats.shuffle()
      }
      ,function(thats){
        return thats.sortBy(function(e){
          return -parseInt(e.innerText.match(/\((\d+)\)/)[1]);
        });
      }
      ,function(thats){
        return thats.sortBy(function(e){
          return -parseInt(e.innerText.match(/\((\d+)\)/)[1]);
        }).reverse();
      }
    ]);

    Array.prototype.shuffle = function() {
      var i = this.length;
      while(i){
        var j = Math.floor(Math.random()*i);
        var t = this[--i];
        this[i] = this[j];
        this[j] = t;
      }
      return this;
    };


    var AutoFollowToggle = function (){
      var AutoFollowIcon = $E("AutoFollowIcon");
      if (wb.onExtensionUpdated === Prototype.emptyFunction)
      {
        AutoFollowIcon.src = AutoFollowSrc.off;
        AutoFollowIcon.alt = AutoFollowAlt.off;
        wb.onExtensionUpdated = MakeTagCloud;
      }
      else
      {
        AutoFollowIcon.src = AutoFollowSrc.on;
        AutoFollowIcon.alt = AutoFollowAlt.on;
        wb.onExtensionUpdated = Prototype.emptyFunction;
      };
    };
    var AutoFollowSrc = {
      on:  "./icon/play_alt_24x24.png",
      off: "./icon/minus_alt_24x24.png"
    };
    var AutoFollowAlt = {
      on:  "AutoFollow Start",
      off: "AutoFollow Stop"
    };


    wb.onSkinEnter = function(){
      LoadTagCloudSkin();
      MakeTagCloud();
    };
    wb.onExtensionUpdated = Prototype.emptyFunction;
    wb.onModifyTags = (ModifiedUpdate)? MakeTagCloud: Prototype.emptyFunction;

    var $E = function (id) { return document.getElementById(id) };

  // -->
  </script>

  <ul id="TagCloud" class="tagCloud"></ul>

  <div id="Button">
    <label>
      <a href="javascript:ToggleTagCloudSkinSelector()"><img src="./icon/user_12x16.png" alt="TagCloudSkin Select"></a>
      <select onChange="javascript:ChangeTagCloudSkin()" id="TagCloudSkinSelector" style="display:none;">
        <option value="01">01</option>
        <option value="02">02</option>
        <option value="03">03</option>
        <option value="04">04</option>
        <option value="05">05</option>
        <option value="06">06</option>
        <option value="07">07</option>
        <option value="08">08</option>
        <option value="09">09</option>
        <option value="10">10</option>
        <option value="11">11</option>
        <option value="12">12</option>
        <option value="13">13</option>
      </select>
    </label>

    <a href="javascript:AutoFollowToggle()"><img src="./icon/play_alt_24x24.png" alt="AutoFollow Start" id="AutoFollowIcon"></a>

    <a href="javascript:SortTagCloud()"><img src="./icon/equalizer_24x24.png" alt="Sort"></a>
    <a href="javascript:wb.find('')"><img src="./icon/home_24x24.png" alt="Clear"></a>
    <a href="javascript:MakeTagCloud()"><img src="./icon/reload_24x28.png" alt="Update"></a>
  </div>

  <div id="config">
    skin-version : 1;
    thum-width   : 0;
    thum-height  : 0;
    thum-column  : 0;
    thum-row     : 0;
  </div>

</body>
</html>
